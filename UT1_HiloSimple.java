/**
 * üìñ TEOR√çA: HILOS EN JAVA
 * ================================================
 * ‚Ä¢ Hilo (Thread): unidad ligera de ejecuci√≥n dentro de un proceso JVM.
 *   - Permite tareas concurrentes (paralelas o cooperativas) compartiendo memoria.
 * ‚Ä¢ Ciclo de vida de un hilo:
 *   1. NEW: instanciado pero no iniciado.
 *   2. RUNNABLE: tras start(), listo para ejecutarse cuando el scheduler lo elija.
 *   3. BLOCKED/WAITING/TIMED_WAITING: espera por I/O, sleep(), join(), monitor o wait().
 *   4. TERMINATED: ha completado run() o ha sido interrumpido.
 * ‚Ä¢ start() vs run():
 *   - start(): crea un nuevo hilo en el SO y llama a run() en paralelo.
 *   - run(): ejecuta el m√©todo en el hilo actual (sin concurrencia).
 * ‚Ä¢ sleep(millis): pausa la ejecuci√≥n del hilo actual sin liberar CPU.
 * ‚Ä¢ interrupt(): solicita interrupci√≥n, provocando InterruptedException en sleep(), join(), wait().
 * ‚Ä¢ join(): espera a que otro hilo termine antes de continuar.
 * ‚Ä¢ Prioridad de hilo (min 1, max 10, por defecto 5): influye en el scheduling, no es garant√≠a.
 * ‚Ä¢ Sincronizaci√≥n:
 *   - synchronized: bloquea acceso a secciones cr√≠ticas para evitar condiciones de carrera.
 *   - Race condition: ocurre cuando m√∫ltiples hilos acceden y modifican recursos sin control.
 * ‚Ä¢ ThreadGroup y ExecutorService: formas avanzadas de agrupar y gestionar hilos.
 * ‚Ä¢ Future y Callable: permite obtener resultados de tareas ejecutadas por hilos.
 *
 * ‚Ä¢ Usos reales de hilos en programaci√≥n:
 *   - Servidores web y aplicaciones concurrentes: atienden m√∫ltiples peticiones simult√°neas.
 *   - Interfaces gr√°ficas (GUI): mantienen la UI responsiva manejando eventos en hilos separados.
 *   - Procesamiento paralelo: c√°lculos intensivos distribuidos en varios n√∫cleos.
 *   - Operaciones de I/O asincr√≥nicas: descargas de ficheros, lectura/escritura sin bloquear.
 *
 * ‚Ä¢ ¬øPor qu√© estudiar hilos?
 *   - Mejorar rendimiento aprovechando hardware multin√∫cleo.
 *   - Gestionar tareas que esperan recursos externos sin congelar la aplicaci√≥n.
 *   - Dominar sincronizaci√≥n y evitar errores de concurrencia.
 *   - Fundamentos de programaci√≥n concurrente y paralela en sistemas reales.
 */

/**
 * üßµ UT1 - Programaci√≥n de Servicios y Procesos (PSP)
 * ================================================
 * üìå Tema: Hilos b√°sicos en Java
 * ------------------------------------------------
 * Este archivo muestra c√≥mo crear y ejecutar dos hilos simples
 * extendiendo la clase `Thread`, con comentarios en cada l√≠nea,
 * iconos y ejercicios adicionales para profundizar en la pr√°ctica.
 */

public class UT1_HiloSimple {

    /**
     * üßµ Clase interna que representa un hilo personalizado
     */
    static class HiloExtendido extends Thread {
        private final String nombreHilo; // üè∑Ô∏è Nombre del hilo para identificarlo

        public HiloExtendido(String nombreHilo) {
            this.nombreHilo = nombreHilo; // üì• Guarda el nombre pasado como par√°metro
        }

        @Override
        public void run() {
            for (int i = 1; i <= 10; i++) { // üîÑ Bucle que se repite 10 veces
                System.out.println("[" + nombreHilo + "] Ejecutando paso " + i); // üñ®Ô∏è Imprime paso actual
                try {
                    Thread.sleep(1000); // üí§ Espera 1 segundo entre pasos
                } catch (InterruptedException e) {
                    System.out.println("[" + nombreHilo + "] Hilo interrumpido."); // ‚ö†Ô∏è Mensaje de interrupci√≥n
                    return; // üîö Termina el hilo si es interrumpido
                }
            }
            System.out.println("[" + nombreHilo + "] Finalizado."); // ‚úîÔ∏è Finaliza ejecuci√≥n
        }
    }

    /**
     * üß™ M√©todo principal que lanza los hilos
     */
    public static void main(String[] args) {
        System.out.println("Inicio del programa principal\n"); // üöÄ Marca inicio del main

        HiloExtendido hilo1 = new HiloExtendido("Hilo-A"); // üßµ Crea hilo con nombre "Hilo-A"
        HiloExtendido hilo2 = new HiloExtendido("Hilo-B"); // üßµ Crea hilo con nombre "Hilo-B"

        hilo1.start(); // ‚ñ∂Ô∏è Arranca ejecuci√≥n de hilo1
        hilo2.start(); // ‚ñ∂Ô∏è Arranca ejecuci√≥n de hilo2

        try {
            hilo1.join(); // ‚è≥ Espera que hilo1 finalice
            System.out.println("[Main] Hilo-A ha terminado, contin√∫o.");
        } catch (InterruptedException e) {
            System.out.println("Main interrumpido al hacer join."); // ‚ö†Ô∏è Error si es interrumpido
        }

        System.out.println("[Main] Sigo con otras tareas mientras Hilo-B sigue:"); // üîÅ Contin√∫a main
        for (int j = 1; j <= 3; j++) {
            System.out.println("[Main] Tarea " + j + " en paralelo"); // üìå Ejecuta tareas mientras Hilo-B trabaja
            try {
                Thread.sleep(700); // üí§ Pausa entre tareas
            } catch (InterruptedException e) {
                System.out.println("Main interrumpido durante tareas.");
            }
        }

        try {
            hilo2.join(); // üîö Espera que hilo2 finalice antes de cerrar
        } catch (InterruptedException ignored) {}

        System.out.println("\nFin del programa principal"); // üèÅ Fin del main
    }
}

/*
 * üéØ EJERCICIOS ADICIONALES PARA EL ALUMNO:
 * ----------------------------------------
 * 1Ô∏è‚É£ Prioridad de hilos (Thread#setPriority)
 *    a) Asigna a cada hilo una prioridad distinta (2 y 8).
 *    b) Observa e informa el orden de ejecuci√≥n varias veces.
 *
 * 2Ô∏è‚É£ Extiende con Runnable (lambda)
 *    a) Crea dos Runnable an√≥nimos que hagan 5 pasos.
 *    b) Usa Thread t = new Thread(miRunnable) y lanza ambos.
 *
 * 3Ô∏è‚É£ Sincronizaci√≥n de recurso compartido
 *    a) Implementa un contador est√°tico incrementado por 2 hilos.
 *    b) Usa synchronized para proteger el m√©todo de incremento.
 *
 * 4Ô∏è‚É£ Condici√≥n de carrera intencionada
 *    a) Quita synchronized del ejercicio 3.
 *    b) Ejecuta y anota los valores incorrectos obtenidos.
 *
 * 5Ô∏è‚É£ Grupo de hilos (ThreadGroup)
 *    a) Crea un ThreadGroup llamado "GrupoPSP".
 *    b) A√±ade 3 hilos al grupo y fanion.
 *
 * 6Ô∏è‚É£ Interrupci√≥n desde main
 *    a) Arranca un hilo que haga 20 pasos.
 *    b) Tras 3 segundos, haz hilo.interrupt() y controla la salida.
 *
 * 7Ô∏è‚É£ ExecutorService b√°sico
 *    a) Crea un pool de 3 hilos.
 *    b) Env√≠a 5 tareas Runnable y cierra el pool con shutdown().
 *
 * 8Ô∏è‚É£ Future y Callable
 *    a) Define un Callable que retorna un String.
 *    b) Env√≠a al ExecutorService y obt√©n el resultado con get().
 *
 * 9Ô∏è‚É£ join con timeout
 *    a) Usa hilo.join(500) antes de imprimir "Timeout superado".
 *
 * üîü EJERCICIO FINAL (M√ÅS SENCILLO)
 *    - Crea un solo hilo que imprima tu nombre 5 veces.
 *    - Usa Thread.sleep(500) entre impresiones.
 */